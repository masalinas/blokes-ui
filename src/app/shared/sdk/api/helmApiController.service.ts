/**
 * LoopBack Application
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HelmApiControllerService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Given a release name, delete the release from Kubernetes
     * @param release Release flags
     * @param flags Command flags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDelete(release: string, flags?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteDelete(release: string, flags?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteDelete(release: string, flags?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteDelete(release: string, flags?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (release === null || release === undefined) {
            throw new Error('Required parameter release was null or undefined when calling deleteDelete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (release !== undefined && release !== null) {
            queryParameters = queryParameters.set('release', <any>release);
        }
        if (flags !== undefined && flags !== null) {
            queryParameters = queryParameters.set('flags', <any>flags);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete(`${this.basePath}/delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Download a named release
     * @param release Release name
     * @param flags Command flags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGet(release: string, flags?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getGet(release: string, flags?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getGet(release: string, flags?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getGet(release: string, flags?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (release === null || release === undefined) {
            throw new Error('Required parameter release was null or undefined when calling getGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (release !== undefined && release !== null) {
            queryParameters = queryParameters.set('release', <any>release);
        }
        if (flags !== undefined && flags !== null) {
            queryParameters = queryParameters.set('flags', <any>flags);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/get`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Install a chart archive
     * @param chart Chart name
     * @param flags Command flags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public installPost(chart: string, flags?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public installPost(chart: string, flags?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public installPost(chart: string, flags?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public installPost(chart: string, flags?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (chart === null || chart === undefined) {
            throw new Error('Required parameter chart was null or undefined when calling installPost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (chart !== undefined && chart !== null) {
            queryParameters = queryParameters.set('chart', <any>chart);
        }
        if (flags !== undefined && flags !== null) {
            queryParameters = queryParameters.set('flags', <any>flags);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post(`${this.basePath}/install`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param flags Command flags
     * @param filter Command filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listGet(flags?: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public listGet(flags?: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public listGet(flags?: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public listGet(flags?: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (flags !== undefined && flags !== null) {
            queryParameters = queryParameters.set('flags', <any>flags);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Displays the status of the named release
     * @param release Release name
     * @param flags Command flags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public statusGet(release: string, flags?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public statusGet(release: string, flags?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public statusGet(release: string, flags?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public statusGet(release: string, flags?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (release === null || release === undefined) {
            throw new Error('Required parameter release was null or undefined when calling statusGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (release !== undefined && release !== null) {
            queryParameters = queryParameters.set('release', <any>release);
        }
        if (flags !== undefined && flags !== null) {
            queryParameters = queryParameters.set('flags', <any>flags);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/status`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Upgrade a release
     * @param release Release name
     * @param chart Chart name
     * @param flags Command flags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public upgradePut(release: string, chart: string, flags?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public upgradePut(release: string, chart: string, flags?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public upgradePut(release: string, chart: string, flags?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public upgradePut(release: string, chart: string, flags?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (release === null || release === undefined) {
            throw new Error('Required parameter release was null or undefined when calling upgradePut.');
        }
        if (chart === null || chart === undefined) {
            throw new Error('Required parameter chart was null or undefined when calling upgradePut.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (release !== undefined && release !== null) {
            queryParameters = queryParameters.set('release', <any>release);
        }
        if (chart !== undefined && chart !== null) {
            queryParameters = queryParameters.set('chart', <any>chart);
        }
        if (flags !== undefined && flags !== null) {
            queryParameters = queryParameters.set('flags', <any>flags);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put(`${this.basePath}/upgrade`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Print the client/server version information
     * @param flags Command flags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public versionGet(flags?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public versionGet(flags?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public versionGet(flags?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public versionGet(flags?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (flags !== undefined && flags !== null) {
            queryParameters = queryParameters.set('flags', <any>flags);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/version`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
